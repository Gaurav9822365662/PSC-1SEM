{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e75a2b54-13fc-48cb-9aae-cb4dde0ec88c",
   "metadata": {},
   "source": [
    "9. Replace a string character by another charactor by taking own example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "26325927-a1b2-46ba-8a92-be91324bb8be",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (2269493773.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[7], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    name@ = \"gaurav dudam\"\u001b[0m\n\u001b[0m          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "name@ = \"gaurav dudam\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "35ae1968-14e1-48a3-a6b2-eff0989d4d07",
   "metadata": {},
   "outputs": [],
   "source": [
    "name_ = \"gaurav dudam\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "118f3e6a-e122-4286-988a-22af423f64fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "_ =\"gaurav dudam\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9a7ba354-bdc8-4ccf-8f7a-cf394146d3d9",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "cannot assign to literal here. Maybe you meant '==' instead of '='? (2398429606.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[16], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    9 = \"gaurav dudam\"\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m cannot assign to literal here. Maybe you meant '==' instead of '='?\n"
     ]
    }
   ],
   "source": [
    "9 = \"gaurav dudam\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8c96e1c1-b627-4e07-b355-c5c099ffea6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "Roll_no_09 = \"gaurav dudam\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f82f68b9-03f1-4c34-a2ea-08a7a403a583",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'gaurav dudam'"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Roll_no_09"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "566c2f83-8bff-4ffa-934d-173dc734957d",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "cannot assign to True (2017032301.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[20], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    True  = \"gaurav dudam\"\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m cannot assign to True\n"
     ]
    }
   ],
   "source": [
    "True  = \"gaurav dudam\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "aad7e698-ceb5-401e-b670-6f21f26d7f99",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (3620327127.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[21], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    na me = \"gaurav dudam\"\u001b[0m\n\u001b[0m       ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "na me = \"gaurav dudam\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6b8bb294-1e6e-491e-a1d1-f4328a000458",
   "metadata": {},
   "outputs": [],
   "source": [
    "age =19"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c4fc976a-0fc6-49e5-891a-73861c23a83e",
   "metadata": {},
   "outputs": [],
   "source": [
    "Age = 20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d315d84b-2208-4bcc-9296-17ae1fa50be1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ebc028f2-3e2e-40c0-9c59-ae2d82ab316e",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid decimal literal (1130448208.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[26], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    19name= \"gaurav dudam\"\u001b[0m\n\u001b[0m     ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid decimal literal\n"
     ]
    }
   ],
   "source": [
    "19name= \"gaurav dudam\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "988ee52b-174b-48f3-8519-4bde66817bf0",
   "metadata": {},
   "outputs": [],
   "source": [
    "name19= \"gaurav dudam\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "31e940ff-3124-4529-bb7c-1ac77c935bf1",
   "metadata": {},
   "outputs": [],
   "source": [
    "a,b, = 23, 45"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "1dc8eff9-84b4-4f86-ad85-64f8c2f28749",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "cbf7c9a3-b94a-4838-b1e2-810213c5fab2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "45"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "4203c32a-bc04-4ca6-95e6-fa8f24ff218e",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "not enough values to unpack (expected 3, got 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[43], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m a,b,c \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m23\u001b[39m,\u001b[38;5;241m45\u001b[39m\n",
      "\u001b[0;31mValueError\u001b[0m: not enough values to unpack (expected 3, got 2)"
     ]
    }
   ],
   "source": [
    "a,b,c = 23,45"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "b2299f59-e010-40cf-9d75-6bc9cb3c11a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gaurav Dudam\n"
     ]
    }
   ],
   "source": [
    "# library function \n",
    "print(\"Gaurav Dudam\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "739e1180-d403-4647-af38-1f888f0411ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23\n",
      "a\n"
     ]
    }
   ],
   "source": [
    "print(a)\n",
    "print(\"a\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "6d51ff31-405c-46a9-93ab-f542b5106223",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23 45 98\n"
     ]
    }
   ],
   "source": [
    "print(a,b,c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "c4d2de89-efbd-4386-9901-e3dec08d1d29",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23/ 45/ 98\n"
     ]
    }
   ],
   "source": [
    "#o/p--> 23,45,98,\n",
    "print(23,45,98,sep='/ ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "22a09ead-aafb-459b-8f98-ae90c6e6c09b",
   "metadata": {},
   "outputs": [],
   "source": [
    "name= \"Gaurav Dudam\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "f6f1c49c-7cc1-4cda-8ae8-9d958fba1f5c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "69ccadfa-2586-4862-9888-fc3ef6bfc9bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "name1= 'Gaurav dudam'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "e89d6b85-7309-44d8-97a1-aaafa55b0c44",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(name1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "9fb9edb6-d890-4e91-9257-b03869ef39ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "name2=\"\"\"Gaurav Dudam\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "c0e521d8-e424-4201-a347-a9851c1d82c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(name2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "5826282a-9e75-4dd9-b33d-570bc34f20ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "name3='''Gaurav Dudam'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "3642464f-78a3-43a0-881c-032e8e5173f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(name3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "cbc992e5-a4b0-4c56-a57c-803179591a7a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# single quote in string is allowed.\n",
    "# double quote in string is allowed\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "40224dc4-01dc-43e5-b520-9080f08ccd91",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gaurav Dudam\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'Print' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[65], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mGaurav Dudam\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m----> 2\u001b[0m Print(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mGaurav Dudam\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'Print' is not defined"
     ]
    }
   ],
   "source": [
    "print(\"Gaurav Dudam\")\n",
    "Print(\"Gaurav Dudam\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "1d2726b1-7814-4be6-8e47-64155ce7eec3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gaurav Dudam\tGaurav Dudam\t"
     ]
    }
   ],
   "source": [
    "print(\"Gaurav Dudam\",end='\\t')\n",
    "print(\"Gaurav Dudam\",end='\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "701077f2-a3f6-4cd8-b822-b4d176041a97",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
